modelA
modelA = occu(formula = ~ Habitat
~ Sun,
data = dodo_umf)
modelA
backTransform(modelA, type = "det")
antilogit <- function(x) { exp(x) / (1 + exp(x) ) }
modelA
antilogit(3.967735)
dodo_edit = read.csv("Dodo_data_edited.csv")
dodo_edit = read.csv("Dodo_data_edited.csv")
dodo_edit
y=dodo_edit[,2:10]
y[y>1]=1
y
siteCovs = data.frame(Habitat=dodo_edit$Habitat, Sun=dodo_edit$Sun)
obsCovs = data.frame(dodo_edit[,13:21])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
dodo_umf = unmarkedFrameOccu(y=y, siteCovs=siteCovs, obsCovs=obsCovs)
summary(dodo_umf)
dodo_umf@siteCovs$Habitat = scale(dodo_umf@siteCovs$Habitat)
dodo_umf@siteCovs$Sun = scale(dodo_umf@siteCovs$Sun)
dodo_umf@obsCovs$obsCovs = scale(dodo_umf@obsCovs$obsCovs)
#create model for fire detection co-variate
model4 = occu(formula = ~ obsCovs
~ 1,
data = umf)
model4
lincombE = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombE) #when there is no fire
lincombF = linearComb(model4, coefficients = c(1,1), type = "det")
backTransform(lincombF) #when there is a fire
backTransform(model4, type="state")
modelB = occu(formula = ~1
~ Habitat,
data = dodo_umf)
modelB
antilogit(2.795750)
antilogit(1.251042)
antilogit(-0.2863899)
antilogit(2.795750)
modelB
antilogit(2.795750)
antilogit(1.251042)
antilogit(-0.2863899)
modelC = occu(formula = ~ Habitat
~ obsCovs,
data = dodo_umf)
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
modelB = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelB
antilogit(-0.4008991)
antilogit(0.3921378)
antilogit(-0.4008991)
modelB
modelB
antilogit(-0.4008991)
antilogit(0.3921378)
antilogit(2.597937)
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
antilogit(2.794921)
antilogit(1.253123)
antilogit(-0.3091785)
antilogit(-0.3717881)
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
lincombE = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombE)
lincombD = linearComb(modelB, coefficients = c(1,1), type = "det")
backTransform(lincombD)
lincombE = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombE)
modelB = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelB
antilogit(-0.4008991)
antilogit(0.3921378)
antilogit(2.597937)
modelB
lincombE = linearComb(modelC, coefficients = c(1,0), type = "det")
backTransform(lincombC)
antilogit(-0.3091785)
antilogit(2.794921)
antilogit(1.253123)
antilogit(-0.3091785)
antilogit(-0.3717881)
modelC
antilogit(-0.3091785)
antilogit(-0.3717881)
antilogit(-0.3091785)
antilogit(-0.3717881)
antilogit(-0.3091785)
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
modelB = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelB
backTransform(modelB, type="state")
lincombA = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(model4, coefficients = c(1,10), type = "det")
backTransform(lincombB) #when there is high quality
backTransform(modelB, type="state")
backTransform(modelB, type="state")
lincombA = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(model4, coefficients = c(1,10), type = "det")
backTransform(lincombB) #when there is high quality
lincombA = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(modelB, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is high quality
modelC = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelC
lincombA = linearComb(modelC, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is flood
lincombA = linearComb(modelC, coefficients = c(1,1), type = "det")
backTransform(lincombA) #when there is flood (0.423)
lincombC = linearComb(modelC, coefficients = c(1,0), type = "state")
backTransform(lincombC) #when there low habitat
lincombD = linearComb(modelC, coefficients = c(1,1), type = "state")
backTransform(lincombD) #when there high habitat (0.942)
lincombA = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(modelB, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is high quality
backTransform(modelB, type="state")
modelA = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelA
lincombA = linearComb(modelA, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(modelA, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is high quality
backTransform(modelA, type="state")
modelB = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelB
lincombA = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is no flood (0.423)
lincombB = linearComb(modelB, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is flood (0.336)
lincombC = linearComb(modelB, coefficients = c(1,0), type = "state")
backTransform(lincombC) #when there low habitat (0.942)
lincombD = linearComb(modelB, coefficients = c(1,1), type = "state")
backTransform(lincombD) #when there high habitat (0.983)
fit = fitList('psi(.)p(Habitat)' = modelA,
'psi(Habitat)p(obsCovs)' = modelB)
modSel(fit)
knitr::opts_chunk$set(echo = TRUE)
install.packages('unmarked')
install.packages('AHMbook')
install.packages("unmarked")
library(unmarked, AHMbook)
###get opossum data
opossum = read.csv("opossumdata.csv")
opossum
#separate detection history
y=opossum[,2:9]
y
#organise covariates
siteCovs = data.frame(Temperature=opossum$Temperature, Habitat=opossum$Habitat)
obsCovs = data.frame(opossum[,12:19])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
#organise data using UMF
umf = unmarkedFrameOccu(y = y, siteCovs = siteCovs, obsCovs = obsCovs)
summary(umf)
#standardise the covariates
umf@siteCovs$Temperature = scale(umf@siteCovs$Temperature)
umf@siteCovs$Habitat = scale(umf@siteCovs$Habitat)
umf@obsCovs$obsCovs = scale(umf@obsCovs$obsCovs)
#standardise the covariates
umf@siteCovs$Temperature = scale(umf@siteCovs$Temperature)
umf@siteCovs$Habitat = scale(umf@siteCovs$Habitat)
umf@obsCovs$obsCovs = scale(umf@obsCovs$obsCovs)
#create model with no covariate
model1 = occu(formula = ~1 ~1, data = umf)
model1
#backtransform from LOGIT scale
backTransform(model1, type="det")
backTransform(model1, type="state")
#create model with temperature occupancy covariate
model2 = occu(formula = ~1 ~Temperature, data = umf)
model2
backTransform(model2, type="det")
lincombA = linearComb(model2, coefficients = c(1,0), type = "state")
backTransform(lincombA)
lincombB = linearComb(model2, coefficients = c(1,1), type = "state")
backTransform(lincombB)
model2
#create model with habitat covariate
model3 = occu(formula = ~1 ~Habitat, data = umf)
model3
backTransform(model3, type="det")
lincombC = linearComb(model3, coefficients = c(1,0), type = "state")
backTransform(lincombC)
lincombD = linearComb(model3, coefficients = c(1,1), type = "state")
backTransform(lincombD)
#create model for fire detection co-variate
model4 = occu(formula = ~ obsCovs
~ 1,
data = umf)
model4
lincombE = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombE) #when there is no fire
lincombF = linearComb(model4, coefficients = c(1,1), type = "det")
backTransform(lincombF) #when there is a fire
backTransform(model4, type="state")
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
modSel(fit)
# load edited dodo data
dodo_edit = read.csv("Dodo_data_edited.csv")
dodo_edit
#separate detection histories
y=dodo_edit[,2:10]
y[y>1]=1
y
siteCovs = data.frame(Habitat=dodo_edit$Habitat, Sun=dodo_edit$Sun)
obsCovs = data.frame(dodo_edit[,13:21])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
#organise data using unmarkedFrameOccu function
dodo_umf = unmarkedFrameOccu(y=y, siteCovs=siteCovs, obsCovs=obsCovs)
summary(dodo_umf)
#standardise covariates
dodo_umf@siteCovs$Habitat = scale(dodo_umf@siteCovs$Habitat)
dodo_umf@siteCovs$Sun = scale(dodo_umf@siteCovs$Sun)
dodo_umf@obsCovs$obsCovs = scale(dodo_umf@obsCovs$obsCovs)
modelA = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelA
lincombA = linearComb(modelA, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is low quality
lincombB = linearComb(modelA, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is high quality
backTransform(modelA, type="state")
modelB = occu(formula = ~ obsCovs
~ Habitat,
data = dodo_umf)
modelB
lincombA = linearComb(modelB, coefficients = c(1,0), type = "det")
backTransform(lincombA) #when there is no flood (0.423)
lincombB = linearComb(modelB, coefficients = c(1,1), type = "det")
backTransform(lincombB) #when there is flood (0.336)
lincombC = linearComb(modelB, coefficients = c(1,0), type = "state")
backTransform(lincombC) #when there low habitat (0.942)
lincombD = linearComb(modelB, coefficients = c(1,1), type = "state")
backTransform(lincombD) #when there high habitat (0.983)
antilogit <- function(x) { exp(x) / (1 + exp(x) ) }
modelA
antilogit(2.597937)
model3
antilogit(17.26712)
antilogit(8.93369)
lincombD = linearComb(model3, coefficients = c(1,1), type = "state")
backTransform(lincombD)
modelC = occu(formula = ~ 1
~ obsCovs,
data = dodo_umf)
modelC
#knitr::opts_chunk$set(echo = TRUE)
#install.packages('unmarked')
#install.packages('AHMbook')
library(unmarked, AHMbook)
# **Question 1:** *'Form meaningful biological hypotheses about how Opossum's occupancy and detection probabilities might vary'* <span style="color:red">red</span>
backTransform(model1, type="det") #(detection probability, p = 0.530)
backTransform(model1, type="state") #(occupancy probability, p = 0.952)
model2
backTransform(model2, type="det") #(detection probability, p = 0.126)
lincombA = linearComb(model2, coefficients = c(1,0), type = "state") #(occupancy probability (low temperature), p =)
backTransform(lincombA)
model3
backTransform(model3, type="det")
lincombC = linearComb(model3, coefficients = c(1,0), type = "state")
backTransform(lincombC) #(occupancy probability, p = )
model4 = occu(formula = ~ obsCovs
~ 1,
data = umf)
model4
lincombE = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombE) #when there is no fire
backTransform(lincombE) #(detection probability (no fire), p = 0.531)
lincombF = linearComb(model4, coefficients = c(1,1), type = "det")
backTransform(lincombF) #when there is a fire
backTransform(model4, type="state") #(occupancy probability, p = 0.531)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages('unmarked')
#install.packages('AHMbook')
library(unmarked, AHMbook)
#Load opossum data
opossum = read.csv("opossumdata.csv")
opossum
#Separate detection history
y=opossum[,2:9]
#Separate detection history
y=opossum[,2:9]
y
#Organise co-variates
siteCovs = data.frame(Temperature=opossum$Temperature, Habitat=opossum$Habitat)
obsCovs = data.frame(opossum[,12:19])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
#Organise data using UMF
umf = unmarkedFrameOccu(y = y, siteCovs = siteCovs, obsCovs = obsCovs)
summary(umf)
#Standardise the covariates
umf@siteCovs$Temperature = scale(umf@siteCovs$Temperature)
umf@siteCovs$Habitat = scale(umf@siteCovs$Habitat)
umf@obsCovs$obsCovs = scale(umf@obsCovs$obsCovs)
#Model 1 - no covariates
model1 = occu(formula = ~1 ~1, data = umf)
#Outputs:
model1
#backtransform from LOGIT scale
backTransform(model1, type="det") #(detection probability, p = 0.530)
backTransform(model1, type="state") #(occupancy probability, p = 0.952)
#Model 2 - No detection covariate, occupancy covariate of average yearly temperature ('Temperature')
model2 = occu(formula = ~1 ~Temperature, data = umf)
backTransform(model2, type="det") #(detection probability, p = 0.531)
lincombA = linearComb(model2, coefficients = c(1,0), type = "state")
lincombB = linearComb(model2, coefficients = c(1,1), type = "state")
#Outputs:
model2
backTransform(model2, type="det") #(detection probability, p = 0.531)
backTransform(lincombA) #(occupancy probability (low temperature), p = 1)
backTransform(lincombB) #(occupancy probability (high temperature), p = 1)
#Model 3 - No detection covatiate, occupancy covariate of habitat quality ('Habitat')
model3 = occu(formula = ~1 ~Habitat, data = umf)
#backTransform(model3, type="det") #(detection probability, p = 0.531) - print at end of chunk for clarity
lincombC = linearComb(model3, coefficients = c(1,0), type = "state")
lincombD = linearComb(model3, coefficients = c(1,1), type = "state")
#Outputs
model3
backTransform(model3, type="det") #(detection probability, p = 0.531)
backTransform(lincombC) #(occupancy probability (low habitat quality), p = 1)
backTransform(lincombD) #(occupancy probability (high habitat quality), p = 1)
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages('unmarked')
#install.packages('AHMbook')
library(unmarked, AHMbook)
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages('unmarked')
#install.packages('AHMbook')
library(unmarked, AHMbook)
#Load opossum data
opossum = read.csv("opossumdata.csv")
opossum
#Separate detection history
y=opossum[,2:9]
#Separate detection history
y=opossum[,2:9]
y
#Organise co-variates
siteCovs = data.frame(Temperature=opossum$Temperature, Habitat=opossum$Habitat)
obsCovs = data.frame(opossum[,12:19])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
#Organise data using UMF
umf = unmarkedFrameOccu(y = y, siteCovs = siteCovs, obsCovs = obsCovs)
summary(umf)
#Standardise the covariates
umf@siteCovs$Temperature = scale(umf@siteCovs$Temperature)
umf@siteCovs$Habitat = scale(umf@siteCovs$Habitat)
umf@obsCovs$obsCovs = scale(umf@obsCovs$obsCovs)
#Model 1 - no covariates
model1 = occu(formula = ~1 ~1, data = umf)
model1
#backtransform from LOGIT scale
backTransform(model1, type="det") #(detection probability, p = 0.530)
backTransform(model1, type="state") #(occupancy probability, p = 0.952)
#Model 2 - No detection covariate, occupancy covariate of average yearly temperature ('Temperature')
model2 = occu(formula = ~1 ~Temperature, data = umf)
model2
backTransform(model2, type="det") #(detection probability, p = 0.531)
lincombA = linearComb(model2, coefficients = c(1,0), type = "state")
backTransform(lincombA) #(occupancy probability (low temperature), p = 1)
lincombB = linearComb(model2, coefficients = c(1,1), type = "state")
backTransform(lincombB) #(occupancy probability (high temperature), p = 1)
#Model 3 - No detection covatiate, occupancy covariate of habitat quality ('Habitat')
model3 = occu(formula = ~1 ~Habitat, data = umf)
model3
backTransform(model3, type="det") #(detection probability, p = 0.531)
lincombC = linearComb(model3, coefficients = c(1,0), type = "state")
backTransform(lincombC) #(occupancy probability (low habitat quality), p = 1)
lincombD = linearComb(model3, coefficients = c(1,1), type = "state")
backTransform(lincombD) #(occupancy probability (high habitat quality), p = 1)
#Model 4 - detection covariate of occurence of fire ('obsCovs'), no occupancy covariate
model4 = occu(formula = ~ obsCovs
~ 1,
data = umf)
model4
lincombE = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombE) #(detection probability (no fire), p = 0.532)
lincombF = linearComb(model4, coefficients = c(1,1), type = "det")
backTransform(lincombF) #(detection probability (fire), p = 0.584)
backTransform(model4, type="state") #(occupancy probability, p = 0.952)
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
modSel(fit)
\\newpage
\newpage
modelC = occu(formula = ~ 1
~ obsCovs,
data = dodo_umf)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages('unmarked')
#install.packages('AHMbook')
library(unmarked, AHMbook)
#Load opossum data
opossum = read.csv("opossumdata.csv")
opossum
#Model 2 - No detection covariate, occupancy covariate of average yearly temperature ('Temperature')
model2 = occu(formula = ~1 ~Temperature, data = umf)
model2
backTransform(model2, type="det") #(detection probability, p = 0.531)
lincombA1 = linearComb(model2, coefficients = c(1,0), type = "state")
backTransform(lincombA1) #(occupancy probability (low temperature), p = 1)
lincombB1 = linearComb(model2, coefficients = c(1,1), type = "state")
backTransform(lincombB1) #(occupancy probability (high temperature), p = 1)
#Model 3 - No detection covatiate, occupancy covariate of habitat quality ('Habitat')
model3 = occu(formula = ~1 ~Habitat, data = umf)
model3
backTransform(model3, type="det") #(detection probability, p = 0.531)
lincombA2 = linearComb(model3, coefficients = c(1,0), type = "state")
backTransform(lincombA2) #(occupancy probability (low habitat quality), p = 1)
lincombB2 = linearComb(model3, coefficients = c(1,1), type = "state")
backTransform(lincombB2) #(occupancy probability (high habitat quality), p = 1)
#Model 4 - detection covariate of occurence of fire ('obsCovs'), no occupancy covariate
model4 = occu(formula = ~ obsCovs
~ 1,
data = umf)
model4
lincombA3 = linearComb(model4, coefficients = c(1,0), type = "det")
backTransform(lincombA3) #(detection probability (no fire), p = 0.532)
lincombB3 = linearComb(model4, coefficients = c(1,1), type = "det")
backTransform(lincombB3) #(detection probability (fire), p = 0.584)
backTransform(model4, type="state") #(occupancy probability, p = 0.952)
fit = fitList('psi(.)p(.)' = model1,
'psi(Temperature)p(.)' = model2,
'psi(Habitat)p(.)'=model3,
'psi(.)p(obsCovs)' = model4)
modSel(fit)
# Load edited dodo data
dodo_edit = read.csv("Dodo_data_edited.csv")
dodo_edit
#Separate detection histories
y=dodo_edit[,2:10]
y[y>1]=1
y
#Organise covariates
siteCovs = data.frame(Habitat=dodo_edit$Habitat, Sun=dodo_edit$Sun)
obsCovs = data.frame(dodo_edit[,13:21])
obsCovs = list(obsCovs=obsCovs)
siteCovs
obsCovs
modelA = occu(formula = ~ Habitat
~ 1,
data = dodo_umf)
modelA
lincombA4 = linearComb(modelA, coefficients = c(1,0), type = "det")
backTransform(lincombA4) #when there is low quality habitat
lincombB4 = linearComb(modelA, coefficients = c(1,1), type = "det")
backTransform(lincombB4) #when there is high quality habitat
backTransform(modelA, type="state")
getwd()
